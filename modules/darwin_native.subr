# Copyright 2016 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * Neither the name of Google Inc. nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# \file darwin_native.subr
# Sandbox type to bind-mount a live macOS system.

shtk_import bool
shtk_import cli
shtk_import config
shtk_import sandbox


# Lists the directories to bind-mount in read-only mode.
#
# This prints one path per directory, without the leading slash.  Each line may
# include spaces, so the caller must be careful to respect those.
_darwin_native_bindfs_mounts() {
    for dir in System \
               bin opt/X11 private/etc sbin \
               usr/bin usr/include usr/lib usr/libexec usr/sbin usr/share
    do
        echo "${dir}"
    done

    # For /Library, we have to make /Library/Caches writable so we cannot just
    # mount the whole hierarchy: OSXFUSE doesn't like nested mount points and
    # our unmount code doesn't like them either.
    #
    # Instead, we iterate over all possible directories in /Library and mount
    # them individually.  We must do it this way, instead of just mounting a
    # set of known directories, because the system might have been configured
    # to use files in subdirectories we don't expect (e.g. PAM could be
    # pointing at a module in a company-specific subdirectory, and then things
    # wouldn't work properly within the sandbox).  Unfortunately, OSXFUSE is
    # slow and doesn't like too many mount points, so we have to blacklist
    # many of the known subdirectories we won't really need.
    find /Library -type d -mindepth 1 -maxdepth 1 | cut -d / -f 3- | \
        while read dir; do
            case "${dir}" in
                Audio) ;;
                Caches) ;;
                ColorPickers) ;;
                ColorSync) ;;
                Components) ;;
                Compositions) ;;
                Contextual\ Menu\ Items) ;;
                CoreMediaIO) ;;
                Desktop\ Pictures) ;;
                DirectoryServices) ;;
                Documentation) ;;
                DropboxHelperTools) ;;
                Fonts) ;;
                Google) ;;
                Graphics) ;;
                Image\ Capture) ;;
                Input\ Methods) ;;
                Keyboard\ Layouts) ;;
                Keychains) ;;
                LaunchAgents) ;;
                LaunchDaemons) ;;
                Logs) ;;
                Managed\ Preferences) ;;
                Messages) ;;
                Modem\ Scripts) ;;
                OpenDirectory) ;;
                PDF\ Services) ;;
                PreferencePanes) ;;
                Printers) ;;
                PrivilegedHelperTools) ;;
                QuickLook) ;;
                QuickTime) ;;
                Raft) ;;
                Receipts) ;;
                Sandbox) ;;
                Screen\ Savers) ;;
                ScriptingAdditions) ;;
                Scripts) ;;
                Security) ;;
                Speech) ;;
                Spotlight) ;;
                StartupItems) ;;
                SystemMigration) ;;
                SystemProfiler) ;;
                Updates) ;;
                User\ Pictures) ;;
                Video) ;;
                WebServer) ;;
                Widgets) ;;
                *) echo "Library/${dir}" ;;
            esac
        done
}


# Reconfigure mDNSResponder to listen on a socket within the sandbox.
#
# To have proper name resolution within the sandbox, we need to tell
# mDNSResponder to create a new socket within the sandbox's /var/run directory.
# Simply bind-mounting the socket is insufficient because macOS denies access to
# it from a chrooted process.
#
# To do the reconfiguration, we create a new service plist and add our socket
# location to it.  We then reload the system service using this new copy.  We do
# not modify the original plist to avoid damaging it, though this could cause
# issues for us if a separate process decides to reload the system service using
# the global configuration (e.g. we'd lose our socket).  This seems unlikely so
# it is better to keep the system configuration safe: worst case, the user can
# reboot the machine to bring it back to a known good state.
#
# \param root Path to the sandbox directory.
_darwin_native_start_mdnsresponder() {
    local root="${1}"; shift

    local sys_plist=/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
    local new_plist="${root}/tmp/com.apple.mDNSResponder.plist"
    local tmp="${new_plist}.tmp"
    plb() { /usr/libexec/PlistBuddy "${@}"; }

    shtk_cli_debug "Configuring mDNSResponder socket in sandbox"

    cp "${sys_plist}" "${new_plist}"

    # When there is just one entry in Sockets:Listeners, this node can be either
    # a dictionary or an array.  Make sure it's an array in any case for our new
    # copy of the plist so that we can extend it later.
    plb -x -c "Print Sockets:Listeners" "${sys_plist}" >"${tmp}"
    if grep '^<dict>$' "${tmp}" >/dev/null; then
        plb -c "Delete Sockets:Listeners" "${new_plist}"
        plb -c "Add Sockets:Listeners array" "${new_plist}"
        plb -c "Add Sockets:Listeners:0 dict" "${new_plist}"
        plb -c "Merge ${tmp} Sockets:Listeners:0" "${new_plist}"
    fi
    rm -f "${tmp}"

    # Now add our own entry to Sockets:Listeners.  Because we reused a copy of
    # the fresh system-wide configuration file, we know we are not there yet.
    cat >"${tmp}" <<EOF
<array>
    <dict>
        <key>SockFamily</key>
        <string>Unix</string>
        <key>SockPathMode</key>
        <integer>438</integer>
        <key>SockPathName</key>
        <string>${root}/var/run/mDNSResponder</string>
    </dict>
</array>
EOF
    plb -c "Merge ${tmp} Sockets:Listeners" "${new_plist}"
    rm -f "${tmp}"

    launchctl unload "${sys_plist}"
    launchctl load "${new_plist}"
}


# Restore the system-wide mDNSResponder configuration.
#
# This is idempotent: we only reload the system service if our sandboxed
# configuration exists, at which point we delete it to ensure subsequent calls
# do nothing.
#
# \param root Path to the sandbox directory.
_darwin_native_stop_mdnsresponder() {
    local root="${1}"; shift

    local sys_plist=/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
    local our_plist="${root}/tmp/com.apple.mDNSResponder.plist"

    if [ -e "${our_plist}" ]; then
        shtk_cli_debug "Restoring system-wide mDNSResponder settings"

        launchctl unload "${our_plist}"
        launchctl load "${sys_plist}"
        rm -f "${our_plist}"
    fi
}


# Prints the configuration variables exposed by this sandbox type.
darwin_native_config_vars() {
    echo "DARWIN_NATIVE_WITH_XCODE"
}


# Sets defaults for the configuration variables used by this sandbox type.
darwin_native_set_defaults() {
    # Remember to update sandboxctl.conf(5) if you change any default values.
    shtk_config_set DARWIN_NATIVE_WITH_XCODE false
}


# Sets up a macOS sandbox that uses bind mounts.
#
# \param root Path to the sandbox directory.
darwin_native_create() {
    local root="${1}"; shift

    _darwin_native_bindfs_mounts | \
        while read dir; do
            mkdir -p "${root}/${dir}" || return
        done
    for dir in \
        Applications \
        Library/Caches dev home \
        private/tmp private/var/folders private/var/tmp private/var/root \
        private/var/run
    do
        mkdir -p "${root}/${dir}" || return
    done
    chmod 1777 "${root}/Library/Caches"
    chmod 1777 "${root}/private/tmp"
    chmod 1777 "${root}/private/var/tmp"
    for dir in etc tmp var; do
        ( cd "${root}" && ln -s "private/${dir}" "${dir}" ) || return
    done
    # Must come last to prevent creating var until it's a symlink.
    mkdir -p "${root}/${HOME}" || return

    # Ideally we'd null-mount /Applications within the sandbox to get access to
    # Xcode and any other applications installed in the host system.
    # Unfortunately this is insufficient to make Xcode functional because the
    # xcodebuild tool relies on the getattrlist(2) system call to determine
    # which SDKs are installed, and neither OSXFUSE nor bindfs implement this
    # system call.  To workaround this, special-case Xcode support by
    # duplicating the whole tree within the sandbox.  Because this is costly, we
    # allow the user to customize this behavior.  See:
    # https://github.com/osxfuse/osxfuse/issues/352
    if shtk_bool_check "$(shtk_config_get DARWIN_NATIVE_WITH_XCODE)"; then
        shtk_cli_info "Copying Xcode into the sandbox; this may take a while"
        ditto /Applications/Xcode.app "${root}/Applications/Xcode.app"
    fi
}


# Enters a macOS sandbox that uses bind mounts.
#
# \param root Path to the sandbox directory.
darwin_native_mount() {
    local root="${1}"; shift

    _darwin_native_bindfs_mounts | \
        while read dir; do
            [ -d "/${dir}" ] || continue
            sandbox_bindfs "/${dir}" "${root}/${dir}"
        done

    mount -t devfs devfs "${root}/dev"

    cp /var/run/resolv.conf "${root}/var/run"
    _darwin_native_start_mdnsresponder "${root}"
}


# Leaves a macOS sandbox that uses bind mounts.
#
# \param root Path to the sandbox directory.
darwin_native_unmount() {
    local root="${1}"; shift

    _darwin_native_stop_mdnsresponder "${root}"
}


# Destroys a macOS sandbox that uses bind mounts.
#
# \param root Path to the sandbox directory.
darwin_native_destroy() {
    local root="${1}"; shift

    # The unmount step should have done this already, but it doesn't harm to be
    # paranoid here in case the unmount logic got out of sync.
    _darwin_native_stop_mdnsresponder "${root}"
}
